name: Build Artifacts

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:

jobs:
  build-package:
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        compiler: [MSVC, GCC]
        include:
          - os: windows-latest
            compiler: MSVC
            triplet: x64-windows
          - os: windows-latest
            compiler: GCC
            triplet: x64-mingw-dynamic
          - os: ubuntu-latest
            compiler: GCC
            triplet: x64-linux
        exclude:
          - os: ubuntu-latest
            compiler: MSVC
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Export GitHub Actions Cache Environment Variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    - name: Install MinGW
      if: matrix.compiler == 'GCC' && runner.os == 'Windows'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        static: 0

    - name: Install vcpkg Windows
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/vcpkg
      run: .\bootstrap-vcpkg.bat

    - name: Install vcpkg Linux
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/vcpkg
      shell: bash
      run: ./bootstrap-vcpkg.sh

    - name: Install Packages
      working-directory: ${{github.workspace}}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: vcpkg/vcpkg install --triplet=${{matrix.triplet}}

    - name: Get Short SHA
      uses: benjlevesque/short-sha@v3.0
      id: short-sha
      with:
        length: 7

    - name: Archive vcpkg Logs
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: vcpkglogs-${{runner.os}}-${{runner.arch}}-${{matrix.compiler}}-${{ steps.short-sha.outputs.sha }}
        path: |
          vcpkg/buildtrees/*/*.log
        retention-days: 7
        compression-level: 9

  build:
    needs: [build-package]
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        compiler: [MSVC, GCC]
        include:
          - os: windows-latest
            compiler: MSVC
            triplet: x64-windows
          - os: windows-latest
            compiler: GCC
            triplet: x64-mingw-dynamic
          - os: ubuntu-latest
            compiler: GCC
            triplet: x64-linux

          - os: windows-latest
            build_type: Debug
            compiler: MSVC
            cmake_config: 'Ninja Debug x64'
            build_path: 'ninja-debug-x64'
          - os: windows-latest
            build_type: Release
            compiler: MSVC
            cmake_config: 'Ninja Release x64'
            build_path: 'ninja-release-x64'
          - os: windows-latest
            build_type: Debug
            compiler: GCC
            cmake_config: 'Ninja Debug Win64 GCC'
            build_path: 'ninja-debug-win64-gcc'
          - os: windows-latest
            build_type: Release
            compiler: GCC
            cmake_config: 'Ninja Release Win64 GCC'
            build_path: 'ninja-release-win64-gcc'
          - os: ubuntu-latest
            build_type: Debug
            compiler: GCC
            cmake_config: 'Ninja Debug Linux GCC'
            build_path: 'ninja-debug-linux-gcc'
          - os: ubuntu-latest
            build_type: Release
            compiler: GCC
            cmake_config: 'Ninja Release Linux GCC'
            build_path: 'ninja-release-linux-gcc'

        exclude:
          - os: ubuntu-latest
            compiler: MSVC

    permissions:
      id-token: write
      contents: read
      attestations: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Export GitHub Actions Cache Environment Variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    - name: Install MinGW
      if: matrix.compiler == 'GCC' && runner.os == 'Windows'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        static: 0

    - name: Install vcpkg Windows
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/vcpkg
      run: .\bootstrap-vcpkg.bat

    - name: Install vcpkg Linux
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/vcpkg
      shell: bash
      run: ./bootstrap-vcpkg.sh

    - name: Initialize MSVC Environment
      if: matrix.compiler == 'MSVC'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{runner.arch}}

    - name: Configure CMake
      working-directory: ${{github.workspace}}
      run: cmake --preset "${{matrix.cmake_config}}"

    - name: Build
      working-directory: ${{github.workspace}}
      run: cmake --build "build/${{matrix.build_path}}" --target LiteHttpd

    - name: Pre Packing
      working-directory: ${{github.workspace}}
      shell: pwsh
      run: ./prePacking.ps1 ./build/${{matrix.build_path}}/bin

    - name: Generate Artifact Attestation Windows
      if: runner.os == 'Windows' && github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: '"${{github.workspace}}/build/${{matrix.build_path}}/bin/*.exe","${{github.workspace}}/build/${{matrix.build_path}}/bin/*.dll"'

    - name: Generate Artifact Attestation Linux
      if: runner.os == 'Linux' && github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: '"${{github.workspace}}/build/${{matrix.build_path}}/bin/LiteHttpd","${{github.workspace}}/build/${{matrix.build_path}}/bin/*.so"'
    
    - name: Get Short SHA
      uses: benjlevesque/short-sha@v3.0
      id: short-sha
      with:
        length: 7

    - name: Archive Artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: LiteHttpd-${{runner.os}}-${{runner.arch}}-${{matrix.compiler}}-${{matrix.build_type}}-${{ steps.short-sha.outputs.sha }}
        path: |
          build/${{matrix.build_path}}/bin/**
        compression-level: 9

    - name: Archive Artifacts (Not Signed)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: LiteHttpd-${{runner.os}}-${{runner.arch}}-${{matrix.compiler}}-${{matrix.build_type}}-${{ steps.short-sha.outputs.sha }}-Unsafe
        path: |
          build/${{matrix.build_path}}/bin/**
        compression-level: 9
